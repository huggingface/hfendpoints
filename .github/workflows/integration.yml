name: Hugging Face Inference Endpoint integration tests
on:
  pull_request:
    branches:
      - main
  merge_group:
    types:
      - checks_requested

permissions:
  contents: read

# Define global environment variables
env:
  HF_TOKEN: ${{ secrets.HUB_HFENDPOINTS_IMAGES_ORG_TOKEN }}

jobs:
  build_target_matrix:
    outputs:
      repositories: ${{ steps.extract.outputs.repositories }}

    runs-on: ubuntu-latest
    env:
      HFENDPOINTS_ENDPOINT_REPOSITORIES: "whisper-vllm-gpu;"

    steps:
      # Extract the comma separated list of repository to individual HFENDPOINTS_ENDPOINT_REPOSITORY_<index>=<model_id>
      - name: "Extract image repositories"
        id: "extract"
        run: |
          IFS=';' read -r -a __repositories__ <<< "${HFENDPOINTS_ENDPOINT_REPOSITORIES}"
          REPOSITORIES_JSON_ARRAY=$(jq -c -n '$ARGS.positional' --args "${__repositories__[@]}")
          REPOSITORIES_JSON_OBJECT=$(jq -c -n --argjson repositories ${REPOSITORIES_JSON_ARRAY} -f <(echo '{"repository":$repositories}'))

          echo "Executing integration tests on the following repositories: ${REPOSITORIES_JSON_ARRAY}" >> $GITHUB_STEP_SUMMARY
          echo "repositories=${REPOSITORIES_JSON_OBJECT}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: build_target_matrix
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.build_target_matrix.outputs.repositories) }}
      max-parallel: 10
    steps:
      - name: "Install hfjobs"
        run: python3 -m pip install hfjobs huggingface_hub

      #      TODO: Check with Hugo
      #      - uses: actions/checkout@v4
      #        with:
      #          repository: huggingface/hf-cli
      #          fetch-depth: '1'
      #          ref: 'main'
      #          token: ${{ secrets.HUGGINGFACE_CLI_TOKEN }}
      #
      #      - uses: actions-rust-lang/setup-rust-toolchain@v1
      #      - name: "Build & install Hugging Face CLI"
      #        run: cargo build --release hf-cli

      - name: "Define global variables"
        env:
          ENDPOINT_REPO: ${{ matrix.repository }}
          ENDPOINT_REPO_PATH: ${{ format('./repos/{0}', matrix.repository) }}
        run: |
          export ENDPOINT_REPO_HFJOBS_FOLDER_PATH=${ENDPOINT_REPO_PATH}/.hfjobs
          export ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH=${ENDPOINT_REPO_HFJOBS_FOLDER_PATH}/deploy.json
          echo "ENDPOINT_REPO=${ENDPOINT_REPO}" >> "$GITHUB_ENV"
          echo "ENDPOINT_REPO_PATH=${ENDPOINT_REPO_PATH}" >> "$GITHUB_ENV"
          echo "ENDPOINT_REPO_HFJOBS_FOLDER_PATH=${ENDPOINT_REPO_HFJOBS_FOLDER_PATH}" >> "$GITHUB_ENV"
          echo "ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH=${ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH}" >> "$GITHUB_ENV"

      - name: "Fetch endpoint specs"
        run: |
          echo "Fetching repository .hfjobs content for ${ENDPOINT_REPO}"
          huggingface-cli login --token ${HF_TOKEN}
          huggingface-cli download hfendpoints-images/${ENDPOINT_REPO} --local-dir ${ENDPOINT_REPO_PATH}

      - name: "Ensure endpoint has .hfjobs folder"
        if: ${{ hashFiles(env.ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH) != '' }}
        run: echo "Found .hfjobs folder"

      - name: "Extract metadata information"
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: huggingface/endpoints-sdk

      - name: "Build SDK container"
        id: build_container_sdk
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          annotations: ${{ steps.metadata.outputs.annotations }}

      - name: "Build endpoint container"
        id: build_container_endpoint
        env:
          ENDPOINT_REPO_SHA: "latest"
        uses: docker/build-push-action@v6
        with:
          file: ${{ format('{0}/Dockerfile', env.ENDPOINT_REPO_HFJOBS_FOLDER_PATH) }}
          push: true
          tags: mfuntowicz/${{ env.ENDPOINT_REPO }}:${{ env.ENDPOINT_REPO_SHA }}

      - name: "Run unittest with hfjobs"
        run: |
          HARDWARE=$(cat ${ENDPOINT_REPO_HFJOBS_FOLDER_PATH}/deploy.json | jq -r '.hardware' )
          echo $(cat ${ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH} | jq -r '.description' )" >> "$GITHUB_STEP_SUMMARY"
          echo "Running $(cat ${ENDPOINT_REPO_HFJOBS_DEPLOY_CONF_PATH} | jq -r '.id' ) on ${HARDWARE}"
          hfjobs run --timeout 1m --flavor $HARDWARE ${ENDPOINT_REPO_HFJOBS_FOLDER_PATH}/Dockerfile



