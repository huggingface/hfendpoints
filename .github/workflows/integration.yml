name: Hugging Face Inference Endpoint integration tests
on:
  pull_request:
    branches:
      - main
  merge_group:
    types:
      - checks_requested

permissions:
  contents: read

jobs:
  build_target_matrix:
    outputs:
      repositories: ${{ steps.extract.outputs.repositories }}

    runs-on: ubuntu-latest
    env:
      HFENDPOINTS_MODEL_REPOSITORIES: "whisper-vllm-gpu;embeddings-llamacpp-cpu"

    steps:
      # Extract the comma separated list of repository to individual HFENDPOINTS_MODEl_REPOSITORY_<index>=<model_id>
      - name: "Extract image repositories"
        id: "extract"
        run: |
          IFS=';' read -r -a __repositories__ <<< "${HFENDPOINTS_MODEL_REPOSITORIES}"
          REPOSITORIES_JSON_ARRAY=$(jq -c -n '$ARGS.positional' --args "${__repositories__[@]}")
          REPOSITORIES_JSON_OBJECT=$(jq -c -n --argjson repositories ${REPOSITORIES_JSON_ARRAY} -f <(echo '{"repository":$repositories}'))

          echo "Executing integration tests on the following repositories: ${REPOSITORIES_JSON_ARRAY}" >> $GITHUB_STEP_SUMMARY
          echo "repositories=${REPOSITORIES_JSON_OBJECT}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: build_target_matrix
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.build_target_matrix.outputs.repositories) }}
      max-parallel: 10
    steps:
      - name: "Setup context"
        env:
          COMMIT_ID: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          echo "Executing over commit: ${COMMIT_ID}"
          echo "COMMIT_ID=${COMMIT_ID}" >> "$GITHUB_ENV"

      - name: "Install hfjobs"
        run: python3 -m pip install hfjobs huggingface_hub

      #      TODO: Check with Hugo
      #      - uses: actions/checkout@v4
      #        with:
      #          repository: huggingface/hf-cli
      #          fetch-depth: '1'
      #          ref: 'main'
      #          token: ${{ secrets.HUGGINGFACE_CLI_TOKEN }}
      #
      #      - uses: actions-rust-lang/setup-rust-toolchain@v1
      #      - name: "Build & install Hugging Face CLI"
      #        run: cargo build --release hf-cli

      - name: "Fetch endpoint specs"
        env:
          HF_TOKEN: ${{ secrets.HUB_HFENDPOINTS_IMAGES_ORG_TOKEN }}
          MODEL_REPO: ${{ matrix.repository }}
          MODEL_PATH: ${{ format('./repos/{0}', matrix.repository) }}
        run: |
          echo "MODEL_PATH=${MODEL_PATH}" >> "$GITHUB_ENV"
          echo "Fetching repository .hfjobs content for ${MODEL_REPO}"
          huggingface-cli login --token ${HF_TOKEN}
          huggingface-cli download hfendpoints-images/${MODEL_REPO} --local-dir ${MODEL_PATH}

      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-actions@v3

      - name: "Build SDK container"
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          push: false
          tags: huggingface/endpoints-sdk:${COMMIT_ID}

      - name: "Run unittest with hfjobs"
        env:
          MODEL_HFJOBS_FOLDER_PATH: ${{ format('{0}/.hfjobs', env.MODEL_PATH) }}
        if: ${{ hashFiles(env.MODEL_HFJOBS_FOLDER_PATH) != '' }}
        run: |
          HARDWARE=$(cat ${MODEL_HFJOBS_FOLDER_PATH}/deploy.json | jq '.hardware' )
          echo "Running $(cat ${MODEL_HFJOBS_FOLDER_PATH}/deploy.json | jq '.id' ) on ${HARDWARE}"
          echo -e "\t -> $(cat ${MODEL_HFJOBS_FOLDER_PATH}/deploy.json | jq '.description' )"
          hfjobs run --timeout 1m --flavor $HARDWARE ${MODEL_HFJOBS_FOLDER_PATH}/Dockerfile



